Dadas dos listas simples enlazadas ya creadas cuyos inicios son PTR1 y PTR2, hacer un algoritmo que elimine de la lista PTR1 los elementos en común entre las dos listas. Nota: No se puede asumir que las listas están ordenadas.

class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

def eliminar_elementos_en_comun(ptr1, ptr2):
    valores_ptr2 = set()
    actual_ptr2 = ptr2

    # Agregamos los valores de PTR2 al conjunto valores_ptr2
    while actual_ptr2:
        valores_ptr2.add(actual_ptr2.valor)
        actual_ptr2 = actual_ptr2.siguiente

    # Recorremos PTR1 y eliminamos los nodos cuyo valor está en valores_ptr2
    previo_ptr1 = None
    actual_ptr1 = ptr1

    while actual_ptr1:
        if actual_ptr1.valor in valores_ptr2:
            # Eliminamos el nodo actual_ptr1
            if previo_ptr1:
                previo_ptr1.siguiente = actual_ptr1.siguiente
            else:
                ptr1 = actual_ptr1.siguiente
            del actual_ptr1
            actual_ptr1 = previo_ptr1.siguiente if previo_ptr1 else ptr1
        else:
            previo_ptr1 = actual_ptr1
            actual_ptr1 = actual_ptr1.siguiente

    return ptr1



 Hacer un algoritmo que escriba el número total de elementos diferentes en una lista enlazada ya creada. ¿Cuáles son?

class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

def contar_elementos_diferentes(lista):
    valores = set()
    actual = lista

    while actual:
        valores.add(actual.valor)
        actual = actual.siguiente

    cantidad = len(valores)
    elementos_diferentes = sorted(list(valores))

    print(f"La lista tiene {cantidad} elementos diferentes:")
    for elemento in elementos_diferentes:
        print(elemento)

    return cantidad

 # Creamos una lista enlazada de ejemplo
nodo4 = Nodo(2)
nodo3 = Nodo(3, nodo4)
nodo2 = Nodo(1, nodo3)
nodo1 = Nodo(2, nodo2)
nodo0 = Nodo(1, nodo1)
lista = nodo0

# Contamos los elementos diferentes en la lista
cantidad = contar_elementos_diferentes(lista)

# Imprimimos la cantidad de elementos diferentes
print(f"Hay {cantidad} elementos diferentes en la lista.")




Hacer un algoritmo que dada una lista simple enlazada ya creada, invierta su sentido. (no puede cambiar la información, solo los enlaces).

class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

def invertir_lista(lista):
    actual = lista
    siguiente = None
    previo = None

    while actual:
        siguiente = actual.siguiente
        actual.siguiente = previo
        previo = actual
        actual = siguiente

    return previo

class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

# Creamos una lista enlazada de ejemplo
nodo4 = Nodo(4)
nodo3 = Nodo(3, nodo4)
nodo2 = Nodo(2, nodo3)
nodo1 = Nodo(1, nodo2)
nodo0 = Nodo(0, nodo1)
lista_original = nodo0

# Invertimos la lista original
lista_invertida = invertir_lista(lista_original)

# Imprimimos los valores de la lista original y la lista invertida
actual = lista_original
while actual:
    print(actual.valor, end=" ")
    actual = actual.siguiente
print()
actual = lista_invertida
while actual:
    print(actual.valor, end=" ")
    actual = actual.siguiente



Hacer un algoritmo que realice las siguientes operaciones a medida que recorre una lista:

a. Si la información del nodo es negativa insertar un nuevo nodo antes de este con información igual a -1000

b. Si la información del nodo es positiva insertar un nuevo nodo después de este con información igual a 1000

c. Si la información del nodo es cero eliminarlo.

No se permite recorrer la lista más de una vez.


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def modify_list(head):
    # Variable to keep track of previous node
    prev = None
    # Variable to keep track of current node
    current = head
    while current is not None:
        # Check if the node's data is negative
        if current.data < 0:
            # Create a new node with data = -1000
            new_node = Node(-1000)
            # Set the new node's next pointer to the current node
            new_node.next = current
            # Set the previous node's next pointer to the new node
            if prev is not None:
                prev.next = new_node
            else:
                # If the current node is the head node, update the head node to the new node
                head = new_node
            # Update the current node to the new node
            current = new_node
        # Check if the node's data is positive
        elif current.data > 0:
            # Create a new node with data = 1000
            new_node = Node(1000)
            # Set the new node's next pointer to the current node's next node
            new_node.next = current.next
            # Set the current node's next pointer to the new node
            current.next = new_node
            # Update the current node to the next node
            current = new_node.next
        else:
            # If the node's data is 0, delete the node
            if prev is not None:
                # Update the previous node's next pointer to the current node's next node
                prev.next = current.next
            else:
                # If the current node is the head node, update the head node to the next node
                head = current.next
            # Update the current node to the next node
            current = current.next
    return head
    
    
    class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

# Creamos una lista enlazada de ejemplo
nodo4 = Nodo(4)
nodo3 = Nodo(3, nodo4)
nodo2 = Nodo(2, nodo3)
nodo1 = Nodo(1, nodo2)
nodo0 = Nodo(0, nodo1)
lista_original = nodo0

# Modificamos la lista original
lista_modificada = modificar_lista(lista_original)

# Imprimimos los valores de la lista original y la lista modificada
actual = lista_original
while actual:
    print(actual.valor, end=" ")
    actual = actual.siguiente
print()
actual = lista_modificada
while actual:
    print(actual.valor, end=" ")
    actual = actual.siguiente

    
    
 Hacer un algoritmo que recorra una lista y regrese dos listas L1 y L2. L1 debe contener los elementos de la lista inicial (sin repetir) y L2 debe contener las veces que se repite ese número.
    
    
    def contar_elementos(lista):
    # creamos un diccionario para contar las ocurrencias de cada elemento
    diccionario = {}
    for elemento in lista:
        if elemento in diccionario:
            diccionario[elemento] += 1
        else:
            diccionario[elemento] = 1
    
    # creamos las listas L1 y L2 a partir del diccionario
    L1 = list(diccionario.keys())
    L2 = list(diccionario.values())
    
    return L1, L2


  lista_original = [1, 2, 3, 2, 1, 1, 4]
  L1, L2 = contar_elementos(lista_original)

 print("L1:", L1)
 print("L2:", L2)
 
 
 
 Dada una lista enlazada simple ya creada, hacer un algoritmo que vaya formando dos listas (PTR1 y PTR2) con los mismos nodos de la lista inicial de tal forma que en la lista PTR1 vayan quedando todos los elementos positivos, y en la lista PTR2 todos los elementos negativos. Si hay nodos que tengan como información el 0 se eliminan.
 
 
 class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

def formar_listas(ptr):
    ptr1 = None
    ptr2 = None
    actual = ptr

    while actual:
        if actual.valor == 0:
            # Eliminar nodo con valor igual a 0
            siguiente = actual.siguiente
            del actual
            actual = siguiente
        elif actual.valor > 0:
            # Agregar nodo a PTR1
            nodo = Nodo(actual.valor)
            nodo.siguiente = ptr1
            ptr1 = nodo
            actual = actual.siguiente
        else:
            # Agregar nodo a PTR2
            nodo = Nodo(actual.valor)
            nodo.siguiente = ptr2
            ptr2 = nodo
            actual = actual.siguiente

    return ptr1, ptr2


class Nodo:
    def __init__(self, valor, siguiente=None):
        self.valor = valor
        self.siguiente = siguiente

# Creamos una lista enlazada de ejemplo
nodo5 = Nodo(5)
nodo4 = Nodo(-2, nodo5)
nodo3 = Nodo(3, nodo4)
nodo2 = Nodo(-1, nodo3)
nodo1 = Nodo(2, nodo2)
nodo0 = Nodo(0, nodo1)
ptr = nodo0

# Formamos las listas PTR1 y PTR2
ptr1, ptr2 = formar_listas(ptr)

# Imprimimos los valores de las listas PTR1 y PTR2
print("PTR1:")
actual = ptr1
while actual:
    print(actual.valor)
    actual = actual.siguiente

print("PTR2:")
actual = ptr2
while actual:
    print(actual.valor)
    actual = actual.siguiente
    
    
    
    
    
 Dadas dos listas enlazadas simples ya creadas (PTR1 y PTR2) ordenadas ascendentemente, hacer un algoritmo que cree una tercera lista PTR3 ordenada descendentemente con los elementos comunes de las dos listas.
 
 
   class Nodo:
    def __init__(self, dato=None, prox=None):
        self.dato = dato
        self.prox = prox
        
def agregar_al_final(ptr, dato):
    if ptr is None:
        return Nodo(dato)
    else:
        ptr.prox = agregar_al_final(ptr.prox, dato)
        return ptr

def invertir_lista(ptr):
    anterior = None
    actual = ptr
    siguiente = None
    while actual is not None:
        siguiente = actual.prox
        actual.prox = anterior
        anterior = actual
        actual = siguiente
    return anterior

def crear_lista_descendente(ptr):
    descendente = None
    while ptr is not None:
        descendente = Nodo(ptr.dato, descendente)
        ptr = ptr.prox
    return descendente

def lista_comun_descendente(ptr1, ptr2):
    ptr3 = None
    while ptr1 is not None and ptr2 is not None:
        if ptr1.dato == ptr2.dato:
            ptr3 = Nodo(ptr1.dato, ptr3)
            ptr1 = ptr1.prox
            ptr2 = ptr2.prox
        elif ptr1.dato > ptr2.dato:
            ptr1 = ptr1.prox
        else:
            ptr2 = ptr2.prox
    return invertir_lista(crear_lista_descendente(ptr3))


  # Creamos dos listas
ptr1 = Nodo(2, Nodo(4, Nodo(6, Nodo(8))))
ptr2 = Nodo(1, Nodo(2, Nodo(3, Nodo(4, Nodo(5, Nodo(6))))))

# Llamamos a la función para obtener la lista de elementos comunes en orden descendente
ptr3 = lista_comun_descendente(ptr1, ptr2)

# Imprimimos los elementos de la lista resultante
while ptr3 is not None:
    print(ptr3.dato)
    ptr3 = ptr3.prox
    
    
    
    
    
Eliminar el K-ésimo nodo de una lista simple enlazada.


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def delete_kth_node(head, k):
    if head is None:
        return None
    
    if k == 1:
        head = head.next
        return head
    
    current = head
    count = 1
    
    while current is not None and count < k-1:
        current = current.next
        count += 1
    
    if current is None or current.next is None:
        return head
    
    current.next = current.next.next
    
    return head
    
    
    

Escribir un algoritmo que verifique si dos listas simples son semejantes. Dos listas enlazadas son semejantes si tienen los mismos elementos, no importa el orden. Si un elemento se repite en una lista en la otra debe repetirse igual número de veces


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def are_lists_similar(head1, head2):
    dict1 = {}
    dict2 = {}
    
    current1 = head1
    while current1 is not None:
        if current1.data not in dict1:
            dict1[current1.data] = 1
        else:
            dict1[current1.data] += 1
        current1 = current1.next
    
    current2 = head2
    while current2 is not None:
        if current2.data not in dict2:
            dict2[current2.data] = 1
        else:
            dict2[current2.data] += 1
        current2 = current2.next
    
    return dict1 == dict2
    
    
   




